{"version":3,"sources":["../../src/controllers/query_ctrl.js"],"names":["QueryCtrl","_","angular","OpenHistorianDataSourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","target","textEditor","segments","elementSegment","newPlusButton","ctrl","datasource","metricFindQuery","then","data","altSegments","map","newSegment","value","item","text","expandable","console","log","panelCtrl","refresh","sort","a","b","unshift","filter","find","x","segment","undefined","push","plusButton","html","index","targets","split","splice","join","templateUrl"],"mappings":"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","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk'\nimport './../css/query-editor.css!'\nimport _ from 'lodash'\nimport angular from 'angular'\n\nexport class OpenHistorianDataSourceQueryCtrl extends QueryCtrl{\n  constructor($scope, $injector, uiSegmentSrv)  {\n    super($scope, $injector);\n\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    this.target.target = '';\n    this.target.textEditor = false;\n    this.segments = [];\n\n    this.elementSegment = this.uiSegmentSrv.newPlusButton();\n    //this.getInitialSegments();\n  }\n\n  getInitialSegments(){\n    var ctrl = this;\n    this.datasource.metricFindQuery(ctrl.target)\n      .then(function(data){\n        var altSegments = _.map(data, item =>{\n          return ctrl.uiSegmentSrv.newSegment({value: item.text, expandable: item.expandable});\n        });\n        console.log(altSegments);\n\n        return altSegments;\n      });\n  }\n\n  onChangeInternal() {\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  toggleEditorMode(){\n    this.target.textEditor = !this.target.textEditor;\n  }\n\n  textEditorChanged(){\n    var ctrl = this;\n  }\n\n    // get a ui segment for the attributes\n  getElementSegmentsToEdit () {\n    var ctrl = this;\n    return this.datasource.metricFindQuery().then( data => {\n        var altSegments = _.map(data, item => {\n            return ctrl.uiSegmentSrv.newSegment({value: item.text, expandable: item.expandable})\n        });\n        altSegments.sort((a,b)=>{           \n          if(a.value < b.value)\n            return -1;\n          if(a.value > b.value)\n            return 1;\n          return 0;\n        });\n        altSegments.unshift(ctrl.uiSegmentSrv.newSegment('-REMOVE-'));\n\n        return _.filter(altSegments, segment => {\n          return _.find(ctrl.segments, x => {\n            return x.value == segment.value\n          }) == undefined;\n        });\n    });\n    \n  }\n\n    getElementSegmentsToAddNew () {\n    var ctrl = this;\n    return this.datasource.metricFindQuery().then( data => {\n        var altSegments = _.map(data, item => {\n            return ctrl.uiSegmentSrv.newSegment({value: item.text, expandable: item.expandable})\n        });\n        altSegments.sort((a,b)=>{ \n          if(a.value < b.value)\n            return -1;\n          if(a.value > b.value)\n            return 1;\n          return 0;\n        });\n\n        return _.filter(altSegments, segment => {\n          return _.find(ctrl.segments, x => {\n            return x.value == segment.value\n          }) == undefined;\n        });\n    });\n    \n  }\n\n\n  addElementSegment(){\n          // if value is not empty, add new attribute segment\n    if (this.elementSegment.value != null) {\n      this.segments.push(this.uiSegmentSrv.newSegment({value: this.elementSegment.value, expandable: true}))\n      this.target.target += (this.target.target == \"\" ? '' : ';') + this.elementSegment.value;\n    }\n\n    // reset the + button\n    var plusButton = this.uiSegmentSrv.newPlusButton()\n    this.elementSegment.value = plusButton.value\n    this.elementSegment.html = plusButton.html\n    this.panelCtrl.refresh()\n\n  }\n  // changes the selecte af element segment\n  segmentValueChanged (segment, index) {\n    if(segment.value== \"-REMOVE-\"){\n      var targets = this.target.target.split(';');\n      this.segments.splice(index, 1);\n      targets.splice(index, 1);\n      this.target.target = targets.join(';');\n    }\n    else{\n      var targets = this.target.target.split(';');\n      this.segments[index] = segment;\n      targets[index] = segment.value;\n      this.target.target = targets.join(';');\n    }\n    \n    \n  }\n}\n\n\n\n\n\nOpenHistorianDataSourceQueryCtrl.templateUrl ='partial/query.editor.html';"]}