{"version":3,"sources":["../../src/spec/datasource_spec.js"],"names":["Datasource","Q","describe","ctx","beforeEach","$q","backendSrv","templateSrv","ds","it","done","query","targets","then","result","expect","data","to","have","length","datasourceRequest","request","when","_request","target","datapoints","replace","series","equal"],"mappings":";;;;;;;;AAAQA,sB,WAAAA,U;;AACDC,a;;;;AAEPC,qBAAS,yBAAT,EAAoC,YAAW;AAC3C,oBAAIC,MAAM,EAAV;;AAEAC,2BAAW,YAAW;AAClBD,wBAAIE,EAAJ,GAASJ,CAAT;AACAE,wBAAIG,UAAJ,GAAiB,EAAjB;AACAH,wBAAII,WAAJ,GAAkB,EAAlB;AACAJ,wBAAIK,EAAJ,GAAS,IAAIR,UAAJ,CAAe,EAAf,EAAmBG,IAAIE,EAAvB,EAA2BF,IAAIG,UAA/B,EAA2CH,IAAII,WAA/C,CAAT;AAEH,iBAND;;AAQAE,mBAAG,sDAAH,EAA2D,UAASC,IAAT,EAAe;AACtEP,wBAAIK,EAAJ,CAAOG,KAAP,CAAa,EAACC,SAAS,EAAV,EAAb,EAA4BC,IAA5B,CAAiC,UAASC,MAAT,EAAiB;AAC9CC,+BAAOD,OAAOE,IAAd,EAAoBC,EAApB,CAAuBC,IAAvB,CAA4BC,MAA5B,CAAmC,CAAnC;AACAT;AACH,qBAHD;AAIH,iBALD;;AAOAD,mBAAG,uDAAH,EAA4D,UAASC,IAAT,EAAe;AACvEP,wBAAIG,UAAJ,CAAec,iBAAf,GAAmC,UAASC,OAAT,EAAkB;AACjD,+BAAOlB,IAAIE,EAAJ,CAAOiB,IAAP,CAAY;AACfC,sCAAUF,OADK;AAEfL,kCAAM,CACF;AACIQ,wCAAQ,GADZ;AAEIC,4CAAY,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP;AAFhB,6BADE;AAFS,yBAAZ,CAAP;AASH,qBAVD;;AAYAtB,wBAAII,WAAJ,CAAgBmB,OAAhB,GAA0B,UAASV,IAAT,EAAe;AACvC,+BAAOA,IAAP;AACD,qBAFD;;AAIAb,wBAAIK,EAAJ,CAAOG,KAAP,CAAa,EAACC,SAAS,CAAC,MAAD,CAAV,EAAb,EAAkCC,IAAlC,CAAuC,UAASC,MAAT,EAAiB;AACpDC,+BAAOD,OAAOS,QAAP,CAAgBP,IAAhB,CAAqBJ,OAA5B,EAAqCK,EAArC,CAAwCC,IAAxC,CAA6CC,MAA7C,CAAoD,CAApD;;AAEA,4BAAIQ,SAASb,OAAOE,IAAP,CAAY,CAAZ,CAAb;AACAD,+BAAOY,OAAOH,MAAd,EAAsBP,EAAtB,CAAyBW,KAAzB,CAA+B,GAA/B;AACAb,+BAAOY,OAAOF,UAAd,EAA0BR,EAA1B,CAA6BC,IAA7B,CAAkCC,MAAlC,CAAyC,CAAzC;AACAT;AACH,qBAPD;AAQH,iBAzBD;AA0BH,aA5CD","file":"datasource_spec.js","sourcesContent":["import {Datasource} from \"../module\";\nimport Q from \"q\";\n\ndescribe('openHistorianDatasource', function() {\n    var ctx = {};\n\n    beforeEach(function() {\n        ctx.$q = Q;\n        ctx.backendSrv = {};\n        ctx.templateSrv = {};\n        ctx.ds = new Datasource({}, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n\n    });\n\n    it('should return an empty array when no targets are set', function(done) {\n        ctx.ds.query({targets: []}).then(function(result) {\n            expect(result.data).to.have.length(0);\n            done();\n        });\n    });\n\n    it('should return the server results when a target is set', function(done) {\n        ctx.backendSrv.datasourceRequest = function(request) {\n            return ctx.$q.when({\n                _request: request,\n                data: [\n                    {\n                        target: 'X',\n                        datapoints: [1, 2, 3]\n                    }\n                ]\n            });\n        };\n\n        ctx.templateSrv.replace = function(data) {\n          return data;\n        }\n\n        ctx.ds.query({targets: ['hits']}).then(function(result) {\n            expect(result._request.data.targets).to.have.length(1);\n\n            var series = result.data[0];\n            expect(series.target).to.equal('X');\n            expect(series.datapoints).to.have.length(3);\n            done();\n        });\n    });\n});\n"]}