{"version":3,"sources":["../src/datasource.js"],"names":["_","OpenHistorianDataSource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","datasourceRequest","method","headers","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","mapToTextValue","map","d","i","text","value","_this","target","refId"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class OpenHistorianDataSource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(function (t) {\n      return !t.hide;\n    });\n\n    if (query.targets.length <= 0) {\n      return this.q.when({ data: [] });\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/',\n      method: 'GET'\n    }).then(function (response) {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(function (result) {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/search',\n      data: options,\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, function (d, i) {\n      return { text: d, value: i };\n    });\n  }\n\n  buildQueryParameters(options) {\n    var _this = this;\n\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, function (target) {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, function (target) {\n      return {\n        target: _this.templateSrv.replace(target.target),\n        refId: target.refId,\n        hide: target.hide\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n}\n"]}