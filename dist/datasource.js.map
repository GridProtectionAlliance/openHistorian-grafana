{"version":3,"sources":["../src/datasource.js"],"names":["_","OpenHistorianDataSource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","datasourceRequest","method","headers","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","interpolated","target","mapToTextValue","map","d","i","text","value","_this","refId","queryType"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nexport class OpenHistorianDataSource {\r\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\r\n    this.type = instanceSettings.type;\r\n    this.url = instanceSettings.url;\r\n    this.name = instanceSettings.name;\r\n    this.q = $q;\r\n    this.backendSrv = backendSrv;\r\n    this.templateSrv = templateSrv;\r\n  }\r\n\r\n  query(options) {\r\n    var query = this.buildQueryParameters(options);\r\n    query.targets = query.targets.filter(function (t) {\r\n      return !t.hide;\r\n    });\r\n\r\n    if (query.targets.length <= 0) {\r\n      return this.q.when({ data: [] });\r\n    }\r\n\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url + '/query',\r\n      data: query,\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n\r\n  testDatasource() {\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url + '/',\r\n      method: 'GET'\r\n    }).then(function (response) {\r\n      if (response.status === 200) {\r\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\r\n      }\r\n    });\r\n  }\r\n\r\n  annotationQuery(options) {\r\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\r\n    var annotationQuery = {\r\n      range: options.range,\r\n      annotation: {\r\n        name: options.annotation.name,\r\n        datasource: options.annotation.datasource,\r\n        enable: options.annotation.enable,\r\n        iconColor: options.annotation.iconColor,\r\n        query: query\r\n      },\r\n      rangeRaw: options.rangeRaw\r\n    };\r\n\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url + '/annotations',\r\n      method: 'POST',\r\n      data: annotationQuery\r\n    }).then(function (result) {\r\n      return result.data;\r\n    });\r\n  }\r\n\r\n  metricFindQuery(options) {\r\n      var interpolated = {\r\n          target: this.templateSrv.replace(options, null, 'regex')\r\n      };\r\n\r\n\r\n    return this.backendSrv.datasourceRequest({\r\n      url: this.url + '/search',\r\n      data: interpolated,\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' }\r\n    }).then(this.mapToTextValue);\r\n  }\r\n\r\n  whereFindQuery(options) {\r\n\r\n      var interpolated = {\r\n          target: this.templateSrv.replace(options, null, 'regex')\r\n      };\r\n\r\n      return this.backendSrv.datasourceRequest({\r\n          url: this.url + '/SearchFields',\r\n          data: interpolated,\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' }\r\n      }).then(this.mapToTextValue);\r\n  }\r\n\r\n  mapToTextValue(result) {\r\n    return _.map(result.data, function (d, i) {\r\n      return { text: d, value: i };\r\n    });\r\n  }\r\n\r\n  buildQueryParameters(options) {\r\n    var _this = this;\r\n\r\n    //remove placeholder targets\r\n    options.targets = _.filter(options.targets, function (target) {\r\n      return target.target !== 'select metric';\r\n    });\r\n\r\n    var targets = _.map(options.targets, function (target) {\r\n      return {\r\n        target: _this.templateSrv.replace(target.target),\r\n        refId: target.refId,\r\n        hide: target.hide, \r\n        queryType: target.queryType\r\n      };\r\n    });\r\n\r\n    options.targets = targets;\r\n\r\n    return options;\r\n  }\r\n\r\n  filterFindQuery() {\r\n      return this.backendSrv.datasourceRequest({\r\n          url: this.url + '/SearchFilters',\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' }\r\n      }).then(this.mapToTextValue);\r\n  }\r\n\r\n  phasorFindQuery(options) {\r\n\r\n      var interpolated = {\r\n          target: this.templateSrv.replace(options, null, 'regex')\r\n      };\r\n\r\n      return this.backendSrv.datasourceRequest({\r\n          url: this.url + '/SearchPhasors',\r\n          data: interpolated,\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' }\r\n      }).then(this.mapToTextValue);\r\n  }\r\n\r\n\r\n  orderByFindQuery(options) {\r\n      var interpolated = {\r\n          target: this.templateSrv.replace(options, null, 'regex')\r\n      };\r\n\r\n      return this.backendSrv.datasourceRequest({\r\n          url: this.url + '/SearchOrderBys',\r\n          data: interpolated,\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' }\r\n      }).then(this.mapToTextValue);\r\n  }\r\n\r\n  getMetaData(options) {\r\n      var interpolated = {\r\n          target: this.templateSrv.replace(options, null, 'regex')\r\n      };\r\n\r\n      return this.backendSrv.datasourceRequest({\r\n          url: this.url + '/GetMetadata',\r\n          data: interpolated,\r\n          method: 'POST',\r\n          headers: { 'Content-Type': 'application/json' }\r\n      });\r\n\r\n  }\r\n}\r\n"]}